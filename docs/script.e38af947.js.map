{"version":3,"sources":["script.js"],"names":["Vue","el","data","activeForm","form","hours","minutes","seconds","timer","timerMeta","duration","elapsed","endTime","prettyEndTime","timeLeft","prettyTime","tickRate","isTimerActive","isPaused","isTimerEnded","timerStateText","allowSound","mouned","console","log","Notification","permission","computed","isFormValid","formEndTime","endDate","calculateEndTime","toLocaleString","toLocaleTimeString","methods","createTimer","durationMS","Date","now","toTimeString","setInterval","timerFunction","quickTimer","h","m","s","notify","stopTimer","document","title","clearForm","err","window","alert","$refs","audio","play","repeatTimer","clearInterval","cancel","playPause","resumeTimer","pauseTimer","Math","floor","padZero","num","String","length","formatMaxLength","field","max","Number","slice","hh","mm","ss","durMS","pastTimers","saveTimer"],"mappings":"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","file":"script.e38af947.js","sourceRoot":"..","sourcesContent":["new Vue({\n    el: '#app',\n    data: {\n        activeForm: 'Enter Duration',\n        form: {\n            hours: null,\n            minutes: null,\n            seconds: null\n        },\n        timer: null,\n        timerMeta: {\n            duration: 0,\n            elapsed: 0,\n            endTime: 0,\n            prettyEndTime: null,\n            timeLeft: 0,\n            prettyTime: null,\n            hours: 0,\n            minutes: 0,\n            seconds: 0,\n        },\n        tickRate: 50,\n        isTimerActive: false,\n        isPaused: false,\n        isTimerEnded: false,\n        timerStateText: 'PAUSE',\n        allowSound: true\n    },\n    mouned() {\n        console.log(Notification.permission);\n    },\n    computed: {\n        isFormValid() {\n            return this.form.hours > 0 || this.form.minutes > 0 || this.form.seconds > 0;\n        },\n        formEndTime() {\n            if (this.isFormValid) {\n                const endDate = this.calculateEndTime(this.form.hours, this.form.minutes, this.form.seconds);\n\n                console.log(endDate.toLocaleString());\n                return endDate.toLocaleTimeString();\n            } else {\n                return null;\n            }\n        }\n    },\n    methods: {\n        createTimer() {\n            if (this.isFormValid) {\n                const durationMS = (this.form.hours * 60 * 60 * 1000) + (this.form.minutes * 60 * 1000) + (this.form.seconds * 1000);\n\n                this.timerMeta = {\n                    ...this.timerMeta,\n                    duration: durationMS,\n                    hours: this.form.hours,\n                    minutes: this.form.minutes,\n                    seconds: this.form.seconds,\n                    prettyEndTime: this.calculateEndTime(this.form.hours, this.form.minutes, this.form.seconds)\n                }\n\n                this.timerMeta.endTime = Date.now() + this.timerMeta.duration;\n                this.timerMeta.timeLeft = this.timerMeta.endTime;\n                this.timerMeta.prettyTime = this.toTimeString();\n\n                this.timer = setInterval(this.timerFunction, this.tickRate);\n\n                this.isTimerActive = true;\n                this.isTimerEnded = false;\n            }\n        },\n        quickTimer(h, m, s) {\n            this.form = {\n                hours: h,\n                minutes: m,\n                seconds: s\n            };\n\n            this.createTimer();\n        },\n        timerFunction() {\n            this.timerMeta.elapsed += 1000;\n            this.timerMeta.timeLeft = this.timerMeta.endTime - Date.now();\n            this.timerMeta.prettyTime = this.toTimeString();\n\n            if (this.timerMeta.timeLeft <= 0) {\n                this.timerMeta.prettyTime = `00:00:00`;\n                this.notify();\n                this.stopTimer();\n            } else {\n                document.title = `${this.timerMeta.prettyTime} | timer`;\n            }\n        },\n        clearForm() {\n            this.form = {\n                hours: 0,\n                minutes: 0,\n                seconds: 0\n            };\n        },\n        notify() {\n            try {\n                var notification = new Notification('Timer Done');\n                document.title = 'TIMER ENDED | spaghet';\n            } catch (err) {\n                console.log('Noficications not supported');\n                window.alert('TIMER ENDED');\n            }\n\n            if (this.allowSound) {\n                this.$refs.audio.play();\n            }\n            \n            this.isTimerEnded = true;\n        },\n        repeatTimer() {\n            this.timerMeta.endTime = Date.now() + this.timerMeta.duration;\n            this.timerMeta.timeLeft = this.timerMeta.endTime;\n            this.timerMeta.prettyTime = this.toTimeString();\n\n            this.timer = setInterval(this.timerFunction, this.tickRate);\n            this.isTimerEnded = false;\n        },\n        stopTimer() {\n            clearInterval(this.timer);\n            this.timer = null;\n        },\n        cancel() {\n            clearInterval(this.timer);\n            this.timer = null;\n            this.isTimerActive = false;\n            this.activeForm = 'Enter Duration';\n        },\n        playPause() {\n            if (this.isPaused) {\n                this.timerStateText = 'PAUSE';\n                this.isPaused = false;\n                this.resumeTimer();\n            } else {\n                this.timerStateText = 'RESUME';\n                this.isPaused = true;\n                this.pauseTimer();\n            }\n        },\n        resumeTimer() {\n            this.timerMeta.endTime = Date.now() + this.timerMeta.timeLeft;\n            this.timerMeta.timeLeft = this.timerMeta.endTime;\n            this.timerMeta.prettyTime = this.toTimeString();\n\n            this.timer = setInterval(this.timerFunction, this.tickRate);\n        },\n        pauseTimer() {\n            clearInterval(this.timer);\n            this.timer = null;\n        },\n        toTimeString() {\n            const hours = Math.floor((this.timerMeta.timeLeft % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));\n            const minutes = Math.floor((this.timerMeta.timeLeft % (1000 * 60 * 60)) / (1000 * 60));\n            const seconds = Math.floor((this.timerMeta.timeLeft % (1000 * 60)) / 1000);\n\n            return `${this.padZero(hours)}:${this.padZero(minutes)}:${this.padZero(seconds)}`;\n        },\n        padZero(num) {\n            return String(num).length > 1 ? num : `0${num}`;\n        },\n        formatMaxLength(field, max) {\n            if (this.form[field].length > max) {\n                this.form[field] = Number(String(this.form[field]).slice(0, max))\n            }\n        },\n        calculateEndTime(hh, mm, ss) {\n            const durMS = (hh * 60 * 60 * 1000) + (mm * 60 * 1000) + (ss * 100);\n            return new Date((Date.now() + durMS));\n        },\n        pastTimers() {\n            // @TODO\n            // Persiist past timers\n        },\n        saveTimer() {\n            // @TODO\n            // Save active timer in event of refresh.\n        }\n    }\n});"]}