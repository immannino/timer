{"mappings":"ACAA,IAAI,IAAI,CACJ,GAAI,OACJ,KAAM,CACF,WAAY,iBACZ,KAAM,CACF,MAAO,KACP,QAAS,KACT,QAAS,IACb,EACA,MAAO,KACP,UAAW,CACP,SAAU,EACV,QAAS,EACT,QAAS,EACT,cAAe,KACf,SAAU,EAEV,WAAY,KACZ,MAAO,EACP,QAAS,EACT,QAAS,CACb,EACA,SAAU,GACV,cAAe,CAAA,EACf,SAAU,CAAA,EACV,aAAc,CAAA,EACd,eAAgB,QAChB,WAAY,CAAA,CAChB,EACA,SACI,QAAQ,IAAI,aAAa,WAC7B,EACA,SAAU,CACN,cACI,OAAO,IAAI,CAAC,KAAK,MAAQ,GAAK,IAAI,CAAC,KAAK,QAAU,GAAK,IAAI,CAAC,KAAK,QAAU,CAC/E,EACA,cACI,IAAI,IAAI,CAAC,YAML,OAAO,IANW,EAClB,IAAM,EAAU,IAAI,CAAC,iBAAiB,IAAI,CAAC,KAAK,MAAO,IAAI,CAAC,KAAK,QAAS,IAAI,CAAC,KAAK,SAGpF,OADA,QAAQ,IAAI,EAAQ,kBACb,EAAQ,oBACnB,CAGJ,CACJ,EACA,QAAS,CACL,cACI,GAAI,IAAI,CAAC,YAAa,CAClB,IAAM,EAAa,AAAC,KAAD,IAAK,CAAC,KAAK,MAA2B,AAAA,IAAA,IAAI,CAAC,KAAK,QAAwB,AAAoB,IAApB,IAAI,CAAC,KAAK,OAErG,CAAA,IAAI,CAAC,UAAY,CACb,GAAG,IAAI,CAAC,SAAS,CACjB,SAAU,EACV,MAAO,IAAI,CAAC,KAAK,MACjB,QAAS,IAAI,CAAC,KAAK,QACnB,QAAS,IAAI,CAAC,KAAK,QACnB,cAAe,IAAI,CAAC,iBAAiB,IAAI,CAAC,KAAK,MAAO,IAAI,CAAC,KAAK,QAAS,IAAI,CAAC,KAAK,QACvF,EAEA,IAAI,CAAC,UAAU,QAAU,KAAK,MAAQ,IAAI,CAAC,UAAU,SACrD,IAAI,CAAC,UAAU,SAAW,IAAI,CAAC,UAAU,QACzC,IAAI,CAAC,UAAU,WAAa,IAAI,CAAC,eAEjC,IAAI,CAAC,MAAQ,YAAY,IAAI,CAAC,cAAe,IAAI,CAAC,UAElD,IAAI,CAAC,cAAgB,CAAA,EACrB,IAAI,CAAC,aAAe,CAAA,CACxB,CACJ,EACA,WAAW,CAAC,CAAE,CAAC,CAAE,CAAC,EACd,IAAI,CAAC,KAAO,CACR,MAAO,EACP,QAAS,EACT,QAAS,CACb,EAEA,IAAI,CAAC,aACT,EACA,gBACI,IAAI,CAAC,UAAU,SAAW,IAC1B,IAAI,CAAC,UAAU,SAAW,IAAI,CAAC,UAAU,QAAU,KAAK,MACxD,IAAI,CAAC,UAAU,WAAa,IAAI,CAAC,eAE7B,IAAI,CAAC,UAAU,UAAY,GAC3B,IAAI,CAAC,UAAU,WAAa,WAC5B,IAAI,CAAC,SACL,IAAI,CAAC,aAEL,SAAS,MAAQ,CAAC,EAAE,IAAI,CAAC,UAAU,WAAW,QAAQ,CAAC,AAE/D,EACA,YACI,IAAI,CAAC,KAAO,CACR,MAAO,EACP,QAAS,EACT,QAAS,CACb,CACJ,EACA,SACI,GAAI,CACmB,IAAI,aAAa,cACpC,SAAS,MAAQ,uBACrB,CAAE,MAAO,EAAK,CACV,QAAQ,IAAI,+BACZ,OAAO,MAAM,cACjB,CAEI,IAAI,CAAC,YACL,IAAI,CAAC,MAAM,MAAM,OAGrB,IAAI,CAAC,aAAe,CAAA,CACxB,EACA,cACI,IAAI,CAAC,UAAU,QAAU,KAAK,MAAQ,IAAI,CAAC,UAAU,SACrD,IAAI,CAAC,UAAU,SAAW,IAAI,CAAC,UAAU,QACzC,IAAI,CAAC,UAAU,WAAa,IAAI,CAAC,eAEjC,IAAI,CAAC,MAAQ,YAAY,IAAI,CAAC,cAAe,IAAI,CAAC,UAClD,IAAI,CAAC,aAAe,CAAA,CACxB,EACA,YACI,cAAc,IAAI,CAAC,OACnB,IAAI,CAAC,MAAQ,IACjB,EACA,SACI,cAAc,IAAI,CAAC,OACnB,IAAI,CAAC,MAAQ,KACb,IAAI,CAAC,cAAgB,CAAA,EACrB,IAAI,CAAC,WAAa,gBACtB,EACA,YACQ,IAAI,CAAC,UACL,IAAI,CAAC,eAAiB,QACtB,IAAI,CAAC,SAAW,CAAA,EAChB,IAAI,CAAC,gBAEL,IAAI,CAAC,eAAiB,SACtB,IAAI,CAAC,SAAW,CAAA,EAChB,IAAI,CAAC,aAEb,EACA,cACI,IAAI,CAAC,UAAU,QAAU,KAAK,MAAQ,IAAI,CAAC,UAAU,SACrD,IAAI,CAAC,UAAU,SAAW,IAAI,CAAC,UAAU,QACzC,IAAI,CAAC,UAAU,WAAa,IAAI,CAAC,eAEjC,IAAI,CAAC,MAAQ,YAAY,IAAI,CAAC,cAAe,IAAI,CAAC,SACtD,EACA,aACI,cAAc,IAAI,CAAC,OACnB,IAAI,CAAC,MAAQ,IACjB,EACA,eACI,IAAM,EAAQ,KAAK,MAAO,IAAI,CAAC,UAAU,SAAY,MAAyB,MACxE,EAAU,KAAK,MAAO,IAAI,CAAC,UAAU,SAAY,KAAoB,KACrE,EAAU,KAAK,MAAO,IAAI,CAAC,UAAU,SAAY,IAAc,KAErE,MAAO,CAAC,EAAE,IAAI,CAAC,QAAQ,GAAO,CAAC,EAAE,IAAI,CAAC,QAAQ,GAAS,CAAC,EAAE,IAAI,CAAC,QAAQ,GAAS,CAAC,AACrF,EACA,QAAA,AAAQ,GACG,OAAO,GAAK,OAAS,EAAI,EAAM,CAAC,CAAC,EAAE,EAAI,CAAC,CAEnD,gBAAgB,CAAK,CAAE,CAAG,EAClB,IAAI,CAAC,IAAI,CAAC,EAAM,CAAC,OAAS,GAC1B,CAAA,IAAI,CAAC,IAAI,CAAC,EAAM,CAAG,OAAO,OAAO,IAAI,CAAC,IAAI,CAAC,EAAM,EAAE,MAAM,EAAG,GADhE,CAGJ,EACA,iBAAA,CAAiB,EAAI,EAAI,IAEd,IAAI,KAAM,KAAK,MADR,CAAA,AAAC,KAAD,EAAyB,AAAA,IAAA,EAAmB,AAAK,IAAL,CAA1D,GAGJ,aAGA,EACA,YAGA,CACJ,CACJ","sources":["<anon>","minimal.js"],"sourcesContent":["new Vue({\n    el: \"#app\",\n    data: {\n        activeForm: \"Enter Duration\",\n        form: {\n            hours: null,\n            minutes: null,\n            seconds: null\n        },\n        timer: null,\n        timerMeta: {\n            duration: 0,\n            elapsed: 0,\n            endTime: 0,\n            prettyEndTime: null,\n            timeLeft: 0,\n            prettyTime: null,\n            hours: 0,\n            minutes: 0,\n            seconds: 0\n        },\n        tickRate: 50,\n        isTimerActive: false,\n        isPaused: false,\n        isTimerEnded: false,\n        timerStateText: \"PAUSE\",\n        allowSound: true\n    },\n    mouned () {\n        console.log(Notification.permission);\n    },\n    computed: {\n        isFormValid () {\n            return this.form.hours > 0 || this.form.minutes > 0 || this.form.seconds > 0;\n        },\n        formEndTime () {\n            if (this.isFormValid) {\n                const endDate = this.calculateEndTime(this.form.hours, this.form.minutes, this.form.seconds);\n                console.log(endDate.toLocaleString());\n                return endDate.toLocaleTimeString();\n            } else return null;\n        }\n    },\n    methods: {\n        createTimer () {\n            if (this.isFormValid) {\n                const durationMS = this.form.hours * 3600000 + this.form.minutes * 60000 + this.form.seconds * 1000;\n                this.timerMeta = {\n                    ...this.timerMeta,\n                    duration: durationMS,\n                    hours: this.form.hours,\n                    minutes: this.form.minutes,\n                    seconds: this.form.seconds,\n                    prettyEndTime: this.calculateEndTime(this.form.hours, this.form.minutes, this.form.seconds)\n                };\n                this.timerMeta.endTime = Date.now() + this.timerMeta.duration;\n                this.timerMeta.timeLeft = this.timerMeta.endTime;\n                this.timerMeta.prettyTime = this.toTimeString();\n                this.timer = setInterval(this.timerFunction, this.tickRate);\n                this.isTimerActive = true;\n                this.isTimerEnded = false;\n            }\n        },\n        quickTimer (h, m, s) {\n            this.form = {\n                hours: h,\n                minutes: m,\n                seconds: s\n            };\n            this.createTimer();\n        },\n        timerFunction () {\n            this.timerMeta.elapsed += 1000;\n            this.timerMeta.timeLeft = this.timerMeta.endTime - Date.now();\n            this.timerMeta.prettyTime = this.toTimeString();\n            if (this.timerMeta.timeLeft <= 0) {\n                this.timerMeta.prettyTime = `00:00:00`;\n                this.notify();\n                this.stopTimer();\n            } else document.title = `${this.timerMeta.prettyTime} | timer`;\n        },\n        clearForm () {\n            this.form = {\n                hours: 0,\n                minutes: 0,\n                seconds: 0\n            };\n        },\n        notify () {\n            try {\n                var notification = new Notification(\"Timer Done\");\n                document.title = \"TIMER ENDED | spaghet\";\n            } catch (err) {\n                console.log(\"Noficications not supported\");\n                window.alert(\"TIMER ENDED\");\n            }\n            if (this.allowSound) this.$refs.audio.play();\n            this.isTimerEnded = true;\n        },\n        repeatTimer () {\n            this.timerMeta.endTime = Date.now() + this.timerMeta.duration;\n            this.timerMeta.timeLeft = this.timerMeta.endTime;\n            this.timerMeta.prettyTime = this.toTimeString();\n            this.timer = setInterval(this.timerFunction, this.tickRate);\n            this.isTimerEnded = false;\n        },\n        stopTimer () {\n            clearInterval(this.timer);\n            this.timer = null;\n        },\n        cancel () {\n            clearInterval(this.timer);\n            this.timer = null;\n            this.isTimerActive = false;\n            this.activeForm = \"Enter Duration\";\n        },\n        playPause () {\n            if (this.isPaused) {\n                this.timerStateText = \"PAUSE\";\n                this.isPaused = false;\n                this.resumeTimer();\n            } else {\n                this.timerStateText = \"RESUME\";\n                this.isPaused = true;\n                this.pauseTimer();\n            }\n        },\n        resumeTimer () {\n            this.timerMeta.endTime = Date.now() + this.timerMeta.timeLeft;\n            this.timerMeta.timeLeft = this.timerMeta.endTime;\n            this.timerMeta.prettyTime = this.toTimeString();\n            this.timer = setInterval(this.timerFunction, this.tickRate);\n        },\n        pauseTimer () {\n            clearInterval(this.timer);\n            this.timer = null;\n        },\n        toTimeString () {\n            const hours = Math.floor(this.timerMeta.timeLeft % 86400000 / 3600000);\n            const minutes = Math.floor(this.timerMeta.timeLeft % 3600000 / 60000);\n            const seconds = Math.floor(this.timerMeta.timeLeft % 60000 / 1000);\n            return `${this.padZero(hours)}:${this.padZero(minutes)}:${this.padZero(seconds)}`;\n        },\n        padZero (num) {\n            return String(num).length > 1 ? num : `0${num}`;\n        },\n        formatMaxLength (field, max) {\n            if (this.form[field].length > max) this.form[field] = Number(String(this.form[field]).slice(0, max));\n        },\n        calculateEndTime (hh, mm, ss) {\n            const durMS = hh * 3600000 + mm * 60000 + ss * 100;\n            return new Date(Date.now() + durMS);\n        },\n        pastTimers () {\n        // @TODO\n        // Persiist past timers\n        },\n        saveTimer () {\n        // @TODO\n        // Save active timer in event of refresh.\n        }\n    }\n});\n\n//# sourceMappingURL=minimal.8b640ebc.js.map\n","new Vue({\n    el: '#app',\n    data: {\n        activeForm: 'Enter Duration',\n        form: {\n            hours: null,\n            minutes: null,\n            seconds: null\n        },\n        timer: null,\n        timerMeta: {\n            duration: 0,\n            elapsed: 0,\n            endTime: 0,\n            prettyEndTime: null,\n            timeLeft: 0\n            ,\n            prettyTime: null,\n            hours: 0,\n            minutes: 0,\n            seconds: 0,\n        },\n        tickRate: 50,\n        isTimerActive: false,\n        isPaused: false,\n        isTimerEnded: false,\n        timerStateText: 'PAUSE',\n        allowSound: true\n    },\n    mouned() {\n        console.log(Notification.permission);\n    },\n    computed: {\n        isFormValid() {\n            return this.form.hours > 0 || this.form.minutes > 0 || this.form.seconds > 0;\n        },\n        formEndTime() {\n            if (this.isFormValid) {\n                const endDate = this.calculateEndTime(this.form.hours, this.form.minutes, this.form.seconds);\n\n                console.log(endDate.toLocaleString());\n                return endDate.toLocaleTimeString();\n            } else {\n                return null;\n            }\n        }\n    },\n    methods: {\n        createTimer() {\n            if (this.isFormValid) {\n                const durationMS = (this.form.hours * 60 * 60 * 1000) + (this.form.minutes * 60 * 1000) + (this.form.seconds * 1000);\n\n                this.timerMeta = {\n                    ...this.timerMeta,\n                    duration: durationMS,\n                    hours: this.form.hours,\n                    minutes: this.form.minutes,\n                    seconds: this.form.seconds,\n                    prettyEndTime: this.calculateEndTime(this.form.hours, this.form.minutes, this.form.seconds)\n                }\n\n                this.timerMeta.endTime = Date.now() + this.timerMeta.duration;\n                this.timerMeta.timeLeft = this.timerMeta.endTime;\n                this.timerMeta.prettyTime = this.toTimeString();\n\n                this.timer = setInterval(this.timerFunction, this.tickRate);\n\n                this.isTimerActive = true;\n                this.isTimerEnded = false;\n            }\n        },\n        quickTimer(h, m, s) {\n            this.form = {\n                hours: h,\n                minutes: m,\n                seconds: s\n            };\n\n            this.createTimer();\n        },\n        timerFunction() {\n            this.timerMeta.elapsed += 1000;\n            this.timerMeta.timeLeft = this.timerMeta.endTime - Date.now();\n            this.timerMeta.prettyTime = this.toTimeString();\n\n            if (this.timerMeta.timeLeft <= 0) {\n                this.timerMeta.prettyTime = `00:00:00`;\n                this.notify();\n                this.stopTimer();\n            } else {\n                document.title = `${this.timerMeta.prettyTime} | timer`;\n            }\n        },\n        clearForm() {\n            this.form = {\n                hours: 0,\n                minutes: 0,\n                seconds: 0\n            };\n        },\n        notify() {\n            try {\n                var notification = new Notification('Timer Done');\n                document.title = 'TIMER ENDED | spaghet';\n            } catch (err) {\n                console.log('Noficications not supported');\n                window.alert('TIMER ENDED');\n            }\n\n            if (this.allowSound) {\n                this.$refs.audio.play();\n            }\n            \n            this.isTimerEnded = true;\n        },\n        repeatTimer() {\n            this.timerMeta.endTime = Date.now() + this.timerMeta.duration;\n            this.timerMeta.timeLeft = this.timerMeta.endTime;\n            this.timerMeta.prettyTime = this.toTimeString();\n\n            this.timer = setInterval(this.timerFunction, this.tickRate);\n            this.isTimerEnded = false;\n        },\n        stopTimer() {\n            clearInterval(this.timer);\n            this.timer = null;\n        },\n        cancel() {\n            clearInterval(this.timer);\n            this.timer = null;\n            this.isTimerActive = false;\n            this.activeForm = 'Enter Duration';\n        },\n        playPause() {\n            if (this.isPaused) {\n                this.timerStateText = 'PAUSE';\n                this.isPaused = false;\n                this.resumeTimer();\n            } else {\n                this.timerStateText = 'RESUME';\n                this.isPaused = true;\n                this.pauseTimer();\n            }\n        },\n        resumeTimer() {\n            this.timerMeta.endTime = Date.now() + this.timerMeta.timeLeft;\n            this.timerMeta.timeLeft = this.timerMeta.endTime;\n            this.timerMeta.prettyTime = this.toTimeString();\n\n            this.timer = setInterval(this.timerFunction, this.tickRate);\n        },\n        pauseTimer() {\n            clearInterval(this.timer);\n            this.timer = null;\n        },\n        toTimeString() {\n            const hours = Math.floor((this.timerMeta.timeLeft % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));\n            const minutes = Math.floor((this.timerMeta.timeLeft % (1000 * 60 * 60)) / (1000 * 60));\n            const seconds = Math.floor((this.timerMeta.timeLeft % (1000 * 60)) / 1000);\n\n            return `${this.padZero(hours)}:${this.padZero(minutes)}:${this.padZero(seconds)}`;\n        },\n        padZero(num) {\n            return String(num).length > 1 ? num : `0${num}`;\n        },\n        formatMaxLength(field, max) {\n            if (this.form[field].length > max) {\n                this.form[field] = Number(String(this.form[field]).slice(0, max))\n            }\n        },\n        calculateEndTime(hh, mm, ss) {\n            const durMS = (hh * 60 * 60 * 1000) + (mm * 60 * 1000) + (ss * 100);\n            return new Date((Date.now() + durMS));\n        },\n        pastTimers() {\n            // @TODO\n            // Persiist past timers\n        },\n        saveTimer() {\n            // @TODO\n            // Save active timer in event of refresh.\n        }\n    }\n});"],"names":["Vue","el","data","activeForm","form","hours","minutes","seconds","timer","timerMeta","duration","elapsed","endTime","prettyEndTime","timeLeft","prettyTime","tickRate","isTimerActive","isPaused","isTimerEnded","timerStateText","allowSound","mouned","console","log","Notification","permission","computed","isFormValid","formEndTime","endDate","calculateEndTime","toLocaleString","toLocaleTimeString","methods","createTimer","durationMS","Date","now","toTimeString","setInterval","timerFunction","quickTimer","h","m","s","notify","stopTimer","document","title","clearForm","err","window","alert","$refs","audio","play","repeatTimer","clearInterval","cancel","playPause","resumeTimer","pauseTimer","Math","floor","padZero","num","String","length","formatMaxLength","field","max","Number","slice","hh","mm","ss","pastTimers","saveTimer"],"version":3,"file":"minimal.8b640ebc.js.map"}